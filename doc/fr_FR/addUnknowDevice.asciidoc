Nous allons voir ici, comment configurer un module Z-Wave qui n’est pas encore reconnu par Jeedom, et qui n’est pas encore disponible en partage sur le Market.

2 axes seront développés :

- Configurer le module Z-Wave sur votre Jeedom.
- Partager votre configuration avec la communauté sur le Market.

Ces tâches ne sont pas complexes, mais nécessitent certaines compétences.

Tout d’abord il faut inclure votre module Z-Wave.

image::../images/zwave_unknowDevice.png[]

Pour cela référez vous à la documentation du plugin Z-Wave. Il faut bien s’assurer que l’inclusion s’est correctement déroulée, et que l’interview est complète. (sinon forcer l'interview, soit sur le module soit sur l'interface avec le bouton engrenage menu de gauche, en mode expert)

image::../images/zwave_unknowDevice2.png[]

Ensuite il faut identifier 2 types de commande.

Les actions (par exemple on/off).
Les infos (par exemple la température).
Il faudra donc savoir si votre module comporte l’un ou l’autre type, et parfois les 2. Suivant le type de commande la configuration est différente, nous allons voir ça plus bas.

==== Les actions
Commençons par les actions. Il faudra vous rendre dans l’interface du contrôleur Z-Way (RaZberry) qui se trouve à http://IP_JEEDOM:8083 Ensuite rendez vous dans le mode Expert, puis device control – switches.

image::../images/zwave_unknowDevice3.png[]

En parallèle ouvrez une fenêtre terminale, pour se connecter en SSH à votre Jeedom. Vérifiez que vos logs sont bien activés :

sudo vi /opt/z-way-server/config.xml Il doit y avoir: log-level=0

Pour couper les logs il faut remettre: log-level=6

Tapez la commande : tail -f /var/log/z-way-server.log Cela permet d’avoir les logs du contrôleur Z-Wave en temps réel.

Maintenant il faut activer une action de votre module Z-Wave, pour cela dans l’interface expert activez une action, par exemple ON. Il suffit alors de retrouver la commande qui apparait à ce moment là dans les logs (en jaune ici).

image::../images/zwave_unknowDevice4.png[]

Elle est composé d’un numéro de device (ici 17) qui doit correspondre à l’id du périphérique récemment ajouté dans Jeedom, le numéro d’instance (ici 0), la classe (ici 0x26) puis enfin la commande (ici Set(255), attention la casse est importante).

Il faudra ensuite reprendre ces informations dans Jeedom.

image::../images/zwave_unknowDevice5.png[]

On retrouve le device ID (dans le champ node ID de la description du module).

Il vous faut ajouter une nouvelle commande (avec le bouton vert ajouter) et compléter les champs “Instance ID”, “Class” et “Commande” avec les valeurs précédemment trouvées (ne pas oublier de donner un nom ainsi qu’un type (Action vu qu'on veut une action ici) et un sous-type pour la commande.

Voyons plus précisément les possibilités pour une commande de type action.

Sur la gauche, la colonne nom permet de définir le nom de l’action, et si on le souhaite un icône qui sera présent à la place du texte. Une liste déroulante permet de mettre des noms par défaut.

image::../images/zwave_unknowDevice6.png[]

Après avoir définit le type action, on peut définir un sous type suivant le type d’action à faire.

image::../images/zwave_unknowDevice7.png[]

Vous avez également à votre disposition plusieurs paramètres. Historiser qui permet de d’archiver les états des actions. Afficher qui permet de dire si l’action sera affichée ou non dans le widget, les autres options seront utiles pour des types infos.

image::../images/zwave_unknowDevice8.png[]

Vous pouvez répéter cette opération pour chaque commande. Pour les commandes de type slider il suffit de mettre dans la commande "Set(#slider#)"


==== Les infos
Passons maintenant aux commandes de type info.

Ici c’est un peu plus complexe, car il faut lire l’arbre z-wave du module. Pour cela rendez-vous sur la page de votre module, rubrique information.

image::../images/zwave_unknowDevice9.png[]

Puis cliquez sur le petit bouton « arbre » situé en haut à droite à côté du bouton partager.

image::../images/zwave_unknowDevice10.png[]

Vous devriez obtenir un résultat similaire à ceci :

image::../images/zwave_unknowDevice11.png[]

A partir de maintenant il faut chercher dans l’arbre l’information qui vous intéresse. S’il s’agit d’un relevé par exemple de température, les informations sont assez facile à trouver. Si c’est une information de type retour d’état, par exemple ouverture de porte, il faudra alors déclencher le retour d’état à partir de votre module.

Vous trouverez en général les informations sous le schéma suivant : dans instance le numéro d’instance, puis dans “data” et dans “commandClass” le numéro de la classe, attention elle est ici en décimale et non en hexa. Pour chaque classe il faut regarder le tableau “data” puis “level”.

Vous aurez également des informations dans les logs au moment de la remontée d’info :

image::../images/zwave_unknowDevice12.png[]

Dans cet exemple de log, c’est la ligne jaune qui nous intéresse, on peut alors récupérer les informations suivantes instance = 0, classe = 49 et commande = data.4.val. Attention le 4 de data.4.val se met entre crochet dans Jeedom.

On obtient donc ceci dans Jeedom :

image::../images/zwave_unknowDevice13.png[]

Comme tout à l’heure plusieurs informations sont à renseigner. On a le nom de la commande, son type ici c’est une info… Le sous type est important, numérique quand il s’agit d’un nombre (par exemple la température), binaire quand il s’agit une info Vrai ou Faux (0 ou 1), et Autre quand on entre dans aucun de ces cas.

image::../images/zwave_unknowDevice14.png[]

Ensuite en dessous de commande, on a plusieurs champs. La valeur de retour d’état, et la durée avant le retour d’état. Ces options sont utiles pour certains modules. En effet certains modules Z-Wave ne gardent pas en mémoire l’état, mais envoient juste un signal comme quoi l’état à changer, un front montant… Ces paramètres permettent de mémoriser cette valeur, et au bout d’un certain temps (durée avant retour) on réinitialise le module avec la valeur du retour d’état.

image::../images/zwave_unknowDevice15.png[]

Ensuite on a les mêmes paramètres que précédemment, Historiser, Afficher, Inverser, et Evènement (toujours le cas pour un module Z-Wave). Enfin on a quelques options, comme l’unité, la valeur min et max que peut prendre une valeur (par défaut 0 et 100).

image::../images/zwave_unknowDevice16.png[]

==== Partage sur le market avec la communauté
Pour finir, un point très important, le partage de votre configuration avec la communauté sur le Market de Jeedom. En partageant votre configuration, vous permettrez aux autres utilisateurs d’utiliser ce module Z-Wave sans avoir à le configurer.

Pour chaque module Z-Wave, il existe un fichier de configuration au format JSON. Ce fichier de configuration doit posséder un nom avec un format bien spécifique : marque.nom_du_module.json ce qui donne par exemple pour un Everspring AD142 everspring.ad142.json (évitez tous les caractères spéciaux et accent).

Après avoir testé votre configuration faite à la main précédemment, vous pouvez vous lancer dans la création du fichier.

Voici un fichier type pour la configuration d’un module en JSON. Vous pouvez télécharger ce fichier type ici. (en italique les lignes non obligatoires suivant le module)


----
{ 
"#marque#.#nom_module#": { 
"name": "#nom commun#", 
"vendor": "#marque#", 

"manufacturerId": "#manufacturerId#", 
"manufacturerProductType": "#manufacturerProductType#", 
"manufacturerProductId": "#manufacturerProductId#", 
"groups": { 
"associate": [#numero_group#] 
}, 
"commands": [ 
{ 
"name": "#nom cmd#", 
"type": "#type cmd#", 
"subtype": "#sous type cmd#", 
"isVisible": "#visibilité cmd#", 
"isHistorized": "#historisation cmd#", 
"eventOnly": "#événement cmd#", 
"configuration": { 
"instanceId": "#instance cmd#", 
"class": "#class cmd#", 
"value": "#valeur cmd#", 
"minValue" : "#max valeur cmd#", 
"returnStateTime": "#valeur retour etat#", 
"returnStateValue": "#durée avant etat#" 
}, 
"display": { 
"invertBinary": "#inverte binaire#" 
}, 
"template": { 
"dashboard": "#widget dashboard#", 
"mobile": "#widget mobile#" 
} 
} 
], 

"parameters": { 
"#id parametre#": { 
"name" : "#nom parametre#", 
"default" : "#valeur par défaut#", 
"type" : "select", 
"value" : { 
"#valeur 1#" : { 
"name" : "#nom valeur 1#", 
"description" : "#description paramètre 1#", 
}, 
"#valeur 2#" : { 
"name" : "#nom valeur 2#", 
"description" : "#description paramètre 2#", 
} 
} 
}, 
"2": { 
"name" : "#nom paramètre#", 
"description" : "#description paramètre#", 
"default" : "#valeur par défaut#", 
"type" : "input", 
"unite" : "#unité#", 
"min" : "#min#", 
"max" : "#max#", 
}, 
} 
} 
}
----

Vous pouvez également vous inspirez de configuration déjà réalisées disponibles sur le Site Web du Market en cliquant sur télécharger les sources.

Vous allez devoir reprendre la configuration manuelle et la retranscrire sur ce fichier. Voici quelques détails sur la structure du fichier.

Tous les champs à compléter sont encadrés de “#”. Voici leur description (attention tous les champs précédés d’une * sont obligatoires) :


- #marque#.#nom_module# : le nom et la marque du module, ATTENTION !! doit être la même que ceux dans le nom du fichier 
- #nom commun# : Le nom commun du module 
- #marque# : La marque du module 
- #manufacturerId# : fabriquant ID 
- #manufacturerProductType# : Type produit 
- #manufacturerProductId# : Produit ID

Ces données sont disponibles sur la partie information de votre module sur l’interface Jeedom (en mode expert).

image::../images/zwave_unknowDevice17.png[]


----
"groups": { 
"associate": [#numero_group#] 
},
----

L’option de groupe permet de définir un groupe d’appartenance au module Z-Wave, à définir dans #numero_group#. Ces lignes ne sont pas obligatoire si on a pas besoin de changer le groupe du module.

Commande (doit être répétée autant de fois qu’il y a de commandes) :


- #nom cmd# : Nom de la commande 
- #type cmd# : Type de la commande ( info ou action ou other ) 
- #sous type cmd# : Sous type ( numeric ou binary ou other ou color ou message ou slider ) 
- #visibilité cmd# : Visibilité (1 ou 0) 
- #historisation cmd# : Historisation de la commande (1 ou 0) 
- #événement cmd# : Événement seulement (1 ou 0) 
- #instance cmd# : Instance de la commande (par défaut 0) 
- #class cmd# : Classe de la commande (en hexa ou décimale) 
- #valeur cmd# : Valeur de la commande 
- #min valeur cmd# : Minimum de la commande (si de type info, par défaut 0) 
- #max valeur cmd# : Maximum de la commande (si de type info, par défaut 100) 
- #inverte binaire# : Inversion du retour binaire lors de l’affichage seulement (uniquement possible sur une commande de type info/binaire) (1 ou 0) 
- #valeur retour etat# : Valeur de retour d’état (1 ou 0) (la ligne n’est pas obligatoire) 
- #durée avant etat# : Durée avant le retour d’état en minute (la ligne n’est pas obligatoire)

Si vous voulez assigner un widget par defaut à votre module il faudra renseigner le template (non obligatoire).

- #widget dashboard# : Le widget par défaut appliqué au module sur le dashboard 
- #widget mobile# : Le widget par défaut appliqué au module sur la version mobile

Paramètres (doit être répété autant de fois qu’il y a de paramètres). Ce sont les paramètres constructeur du module Z-Wave vous les trouverez dans la documentation de votre module. Il y deux types de paramètres, voici déjà les points communs

- #id paramètre# : ID du paramètre 
- #nom paramètre# : Nom du paramètre 
- #valeur par défaut# : Valeur par défaut 
- #description paramètre# : Description du paramètre 
- Select (autant de valeurs qu’on veut) : 
* #valeur 1# : Valeur pour le choix 1 
* #nom valeur 1# : Nom du choix 1 
- #description paramètre1# : Description du choix 1 
- Input 
- #unité# : Unité du paramètre 
- #min# : Minimum possible du paramètre 
- #max# : Maximum

Une fois que vous avez créé le fichier JSON, il faut l’envoyer sur votre installation Jeedom. Pour cela cliquez dans la rubrique Information de votre module sur le bouton Envoyer une configuration :

image::../images/zwave_unknowDevice18.png[]

Si votre fichier est correctement écrit, il doit apparaitre maintenant dans la liste des modules Z-Wave, toujours dans la rubrique Information.

image::../images/zwave_unknowDevice19.png[]

Sélectionnez-le, puis faite sauvegarder. Ensuite testez votre module pour savoir si tout fonctionne correctement. Si tout est bon, il n’y a plus qu’à cliquer sur le bouton orange Partager sur la page de votre module rubrique Information.

image::../images/zwave_unknowDevice20.png[]

A noter que pour pouvoir partager un module, il faut que vous soyer préalablement inscrit sur le Market Jeedom, et que votre Jeedom soit relié à votre compte Market. (voir documentation Market).

Une popup va alors s’ouvrir vous demandant quelques renseignements sur ce module.

image::../images/zwave_unknowDevice21.png[]

Donnez le nom complet de votre module Z-Wave, la catégorie Module zwave, si des liens sont disponibles vers une vidéo, le wiki ou le forum ne pas hésiter à les mettre. Enfin, un guide d’utilisation du module si nécessaire, et le Changelog ou vous pouvez y noter les mises à jour que vous effectuerez par la suite.Cliquez sur le bouton vert en haut à droite Envoyer, et votre configuration sera disponible sur le Market !

Votre configuration sera en version dite BETA. Ne pas hésiter à nous solliciter sur le forum, ou par mail contact@jeedom.com pour signaler le fonctionnement de votre configuration si celle-ci est prête pour passer en version STABLE. Vous pouvez aussi aller sur le Site Web du Market pour ajouter une photo à votre configuration.

Vous avez maintenant configurer un module inconnu de Jeedom et vous l'avez partagé avec la communauté sur le Market.
